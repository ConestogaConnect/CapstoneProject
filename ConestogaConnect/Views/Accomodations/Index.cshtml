@model IEnumerable<ConestogaConnect.Models.AccomodationViewModel>
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Accomodations";
}


<div class="body-content">

    <h2>Accomodations</h2>

    <p>
        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-default" })
    </p>
   

</div>
 <hr />


<section class="postSection">
    <div class="container">
        <div class="row">
            <div class="col-sm-2" ?>
                @{ Html.RenderPartial("_SideLinks"); }
            </div>

            <div class="col-sm-7">
                <div class="postInner">
                    @foreach (var item in Model)
                    {
                        <div class="postBox">
                            <div class="postHeader clearfix">
                                <div class="postWriter pull-left">
                                    <img src="images/profile.jpg" alt="" width="40">
                                    <span class="postName"> @Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)</span>
                                </div>
                                <div class="pull-right datePost">
                                    <span>@string.Format("{0:MMM dd, yyyy HH:mm tt}", item.Posted_Date)</span>
                                </div>
                            </div>


                            <div class="postDetail">
                                <div class="postContent">

                                    <p>
                                        @if (item.Number_of_Rooms != null)
        {
                                @Html.Raw("Number of Rooms : ")
                                @Html.DisplayFor(modelItem => item.Number_of_Rooms)
}
                                    </p>

                                    <p>
                                        @if (item.Rent != null)
        {
                                @Html.Raw("Rent : ")
                                <strong>@Html.DisplayFor(modelItem => item.Rent) </strong>
}
                                    </p>

                                    <p>
                                        @if (item.Facilities != null)
        {
                                @Html.Raw("Facilities : ")
                                <strong>@Html.DisplayFor(modelItem => item.Facilities) </strong>
}
                                    </p>

                                    <p>
                                        @if (item.Parking == true)
        {
                                @Html.Raw("Parking : ")
                                <strong>Yes</strong>
}
                                        @if (item.Parking == false)
        {
                                @Html.Raw("Parking : ")
                                <strong>No</strong>
}
                                    </p>


                                    <p>
                                        @if (item.Floor != null)
        {
                                @Html.Raw("Floor : ")
                                <strong>@Html.DisplayFor(modelItem => item.Floor) </strong>
}
                                    </p>

                                    <p>
                                        @if (item.Furnished == true)
        {
                                @Html.Raw("Furnished : ")
                                <strong>Yes</strong>
}
                                    </p>

                                    <p>
                                        @if (item.Furnished == false)
        {
                                @Html.Raw("Furnished : ")
                                <strong>No</strong>
}
                                    </p>

                                    <p>
                                        @if (User.Identity.GetUserId() == item.UserId)
        {
                                @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                                @Html.Raw(" | ")
}

                                        @Html.ActionLink("Details", "Details", new { id = item.Id })
                                        @if (User.Identity.GetUserId() == item.UserId)
        {
                                @Html.Raw(" | ")
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
}


                                    </p>

                                </div>
                                <div class="postContentImages">
                                   @if (item.Images != null)
                                   {
                                       foreach (var img in item.Images) {
                                       <div class="postImages">
                                           <img src="@img.ImagePath" title="@img.ImageTitle" class="postImg" />
                                       </div>
                                           break;
                                       }
                                   }
                                </div>
                                <div style="clear:both"></div>
                            </div>

                        </div>


                    }
                </div>
            </div>


            <div class="col-sm-3">
                <div class="newsFeed">
                    <h4>News</h4>
                    @{Html.RenderAction("_NewsFeedPartial", "NewsFeeds");}
                </div>
            </div>
        </div>
    </div>
</section>

<link href="~/Content/datepicker/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/datepicker/jquery-ui.structure.css" rel="stylesheet" />
<link href="~/Content/datepicker/jquery-ui.theme.css" rel="stylesheet" />
<script src="~/Content/datepicker/jquery-ui.js"></script>

<script type="text/javascript">
    var dateFormat = "dd/mm/yy";
    $(document).ready(function () {
        var pdfrom = $("#pdfrom").datepicker({
            defaultDate: "+1w",
            changeMonth: true,
            dateFormat: dateFormat,
            numberOfMonths: 1
        }).on("change", function () {
            pdto.datepicker("option", "minDate", getDate(this));
        }),
            pdto = $("#pdto").datepicker({
                defaultDate: "+1w",
                changeMonth: true,
                dateFormat: dateFormat,
                numberOfMonths: 1
            }).on("change", function () {
                pdfrom.datepicker("option", "maxDate", getDate(this));
            });

        var ufrom = $("#ufrom").datepicker({
            defaultDate: "+1w",
            changeMonth: true,
            dateFormat: dateFormat,
            numberOfMonths: 1
        }).on("change", function () {
            uto.datepicker("option", "minDate", getDate(this));
        }),
            uto = $("#uto").datepicker({
                defaultDate: "+1w",
                changeMonth: true,
                dateFormat: dateFormat,
                numberOfMonths: 1
            }).on("change", function () {
                ufrom.datepicker("option", "maxDate", getDate(this));
            });
    });

    function getDate(element) {
        var date;
        try {
            date = $.datepicker.parseDate(dateFormat, element.value);
        } catch (error) {
            date = null;
        }
        return date;
    }
</script>